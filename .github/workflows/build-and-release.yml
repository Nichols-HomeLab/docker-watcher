name: Build image & create release (main)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Compute image repo (lowercase, org-pinned)
        id: img
        run: |
          echo "OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "NAME_LC=$(basename '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "IMAGE_REPO=${{ env.REGISTRY }}/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/$(basename '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set version
        id: version
        run: |
          echo "VERSION=v0.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.img.outputs.IMAGE_REPO }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.SHORT_SHA }}
            type=raw,value=${{ steps.version.outputs.VERSION }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Make GHCR package public (curl, org→user fallback, with retries)
        env:
          REGISTRY: ghcr.io
          OWNER_LC: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          GHCR_PUBLISH_PAT: ${{ secrets.GHCR_PUBLISH_PAT }}
        run: |
          set -euo pipefail
          OWNER_LC="$(echo "${OWNER_LC}" | tr '[:upper:]' '[:lower:]')"
          PKG="$(echo "${REPO_NAME}" | tr '[:upper:]' '[:lower:]')"
          USER_LC="$(echo "${GITHUB_ACTOR}" | tr '[:upper:]' '[:lower:]')"

          auth_header="Authorization: Bearer ${GHCR_PUBLISH_PAT}"
          accept_header="Accept: application/vnd.github+json"

          # helper: check if package exists under org/user
          pkg_exists() {
            local scope="$1"  # org|user
            if [ "$scope" = "org" ]; then
              curl -fsS -H "$accept_header" -H "$auth_header" \
                "https://api.github.com/orgs/${OWNER_LC}/packages/container/${PKG}" >/dev/null
            else
              curl -fsS -H "$accept_header" -H "$auth_header" \
                "https://api.github.com/users/${USER_LC}/packages/container/${PKG}" >/dev/null
            fi
          }

          # helper: set visibility public under org/user
          make_public() {
            local scope="$1"  # org|user
            local url
            if [ "$scope" = "org" ]; then
              url="https://api.github.com/orgs/${OWNER_LC}/packages/container/${PKG}/visibility"
            else
              url="https://api.github.com/users/${USER_LC}/packages/container/${PKG}/visibility"
            fi
            curl -fsS -X PUT -H "$accept_header" -H "$auth_header" \
              -d '{"visibility":"public"}' "$url" >/dev/null
          }

          # wait (briefly) for GHCR to register the freshly pushed package
          tries=0
          max_tries=15   # ~30s total
          until pkg_exists org || pkg_exists user; do
            tries=$((tries+1))
            if [ $tries -ge $max_tries ]; then
              echo "Package ${PKG} not yet visible under org '${OWNER_LC}' or user '${USER_LC}' after waiting. Failing."
              exit 1
            fi
            echo "Package not found yet; retrying (${tries}/${max_tries})..."
            sleep 2
          done

          # attempt org first; if not there, try user
          if pkg_exists org; then
            echo "Found package under org '${OWNER_LC}/${PKG}'. Making public…"
            make_public org
            echo "✔ Package is now public under org."
          elif pkg_exists user; then
            echo "Found package under user '${USER_LC}/${PKG}'. Making public…"
            make_public user
            echo "✔ Package is now public under user."
          else
            echo "Unexpected: package disappeared between checks."
            exit 1
          fi




      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: ${{ steps.version.outputs.VERSION }}
          body: |
            Automated release for commit `${{ steps.version.outputs.SHORT_SHA }}`.

            **Images:**
            - `${{ steps.img.outputs.IMAGE_REPO }}:latest`
            - `${{ steps.img.outputs.IMAGE_REPO }}:${{ steps.version.outputs.SHORT_SHA }}`
            - `${{ steps.img.outputs.IMAGE_REPO }}:${{ steps.version.outputs.VERSION }}`
          draft: false
          prerelease: false
